/*
 * Copyright 2023 International Business Machines Corp..
 * 
 * See the NOTICE file distributed with this work for additional information
 * regarding copyright ownership. Licensed under the Apache License, 
 * Version 2.0 (the "License"); you may not use this file except in compliance
 * with the License. You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
*/
package com.ibm.slsa;

import java.util.Map;

import com.ibm.intoto.attestation.utils.Utils;
import jakarta.json.Json;
import jakarta.json.JsonArray;
import jakarta.json.JsonObject;
import jakarta.json.JsonObjectBuilder;

/**
 * Identifies the build platform that executed the invocation, which is trusted to have correctly performed the operation and
 * populated this provenance.
 * <p>
 * The build platform, or builder for short, represents the transitive closure of all the entities that are, by necessity, trusted
 * to faithfully run the build and record the provenance.
 * <p>
 * See https://slsa.dev/provenance/v1#builder.
 */
public class Builder {

    public static final String KEY_ID = "id";
    public static final String KEY_BUILDER_DEPENDENCIES = "builderDependencies";
    public static final String KEY_VERSION = "version";

    /**
     * URI indicating the transitive closure of the trusted build platform. This is intended to be the sole determiner of the SLSA
     * Build level. The {@code builder.id} URI SHOULD resolve to documentation explaining:
     * <ul>
     * <li>The scope of what this ID represents.
     * <li>The claimed SLSA Build level.
     * <li>The accuracy and completeness guarantees of the fields in the provenance.
     * <li>Any fields that are generated by the tenant-controlled build process and not verified by the trusted control plane,
     * except for the subject.
     * <li>The interpretation of any extension fields.
     * </ul>
     */
    private String id = null;

    /**
     * Dependencies used by the orchestrator that are not run within the workload and that do not affect the build, but might
     * affect the provenance generation or security guarantees.
     */
    private JsonArray builderDependencies = null;

    /**
     * Map of names of components of the build platform to their version.
     */
    private Map<String, String> version = null;

    private Builder(BuilderBuilder builderBuilder) {
        this.id = builderBuilder.id;
        this.builderDependencies = builderBuilder.builderDependencies;
        this.version = builderBuilder.version;
    }

    public JsonObject toJson() {
        JsonObjectBuilder builder = Json.createObjectBuilder();
        builder.add(KEY_ID, id);
        Utils.addIfNonNullAndNotEmpty(builderDependencies, KEY_BUILDER_DEPENDENCIES, builder);
        Utils.addIfNonNullAndNotEmpty(version, KEY_VERSION, builder);
        return builder.build();
    }

    /**
     * I know, I know...
     */
    public static class BuilderBuilder {

        private String id = null;
        private JsonArray builderDependencies = null;
        private Map<String, String> version = null;

        public BuilderBuilder(String id) {
            this.id = id;
        }

        public BuilderBuilder builderDependencies(JsonArray builderDependencies) {
            this.builderDependencies = builderDependencies;
            return this;
        }

        public BuilderBuilder version(Map<String, String> version) {
            this.version = version;
            return this;
        }

        public Builder build() {
            return new Builder(this);
        }
    }

}
